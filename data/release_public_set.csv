,id,task,messages,detail,input,output_format,metric,ground_truth
0,6370df4c-de52-4485-a798-b9a0d6eeb4a0,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/6370df4c-de52-4485-a798-b9a0d6eeb4a0/ref.png', 'test': './data/public_set/6370df4c-de52-4485-a798-b9a0d6eeb4a0/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/6370df4c-de52-4485-a798-b9a0d6eeb4a0/defect.png
1,a1dee736-0895-40a2-bb96-96bbdf52b1dc,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/a1dee736-0895-40a2-bb96-96bbdf52b1dc/ref.png', 'test': './data/public_set/a1dee736-0895-40a2-bb96-96bbdf52b1dc/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/a1dee736-0895-40a2-bb96-96bbdf52b1dc/defect.png
2,99a4a8fd-2854-4d1d-bb07-4bbfcc04257b,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/99a4a8fd-2854-4d1d-bb07-4bbfcc04257b/ref.png', 'test': './data/public_set/99a4a8fd-2854-4d1d-bb07-4bbfcc04257b/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/99a4a8fd-2854-4d1d-bb07-4bbfcc04257b/defect.png
3,2e4e176c-f8bb-47b9-873d-0b76637e7e7f,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/2e4e176c-f8bb-47b9-873d-0b76637e7e7f/ref.png', 'test': './data/public_set/2e4e176c-f8bb-47b9-873d-0b76637e7e7f/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/2e4e176c-f8bb-47b9-873d-0b76637e7e7f/defect.png
4,7d901a98-33e8-41e3-b110-b3984ed2ee3a,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/7d901a98-33e8-41e3-b110-b3984ed2ee3a/ref.png', 'test': './data/public_set/7d901a98-33e8-41e3-b110-b3984ed2ee3a/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/7d901a98-33e8-41e3-b110-b3984ed2ee3a/defect.png
5,84fbb95d-3b8f-43ae-9bb1-b450c020dc74,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/84fbb95d-3b8f-43ae-9bb1-b450c020dc74/ref.png', 'test': './data/public_set/84fbb95d-3b8f-43ae-9bb1-b450c020dc74/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/84fbb95d-3b8f-43ae-9bb1-b450c020dc74/defect.png
6,c5d8522b-1b8b-4584-9a51-2ea4e19687ec,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/c5d8522b-1b8b-4584-9a51-2ea4e19687ec/ref.png', 'test': './data/public_set/c5d8522b-1b8b-4584-9a51-2ea4e19687ec/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/c5d8522b-1b8b-4584-9a51-2ea4e19687ec/defect.png
7,1728876c-b26d-4822-a0f6-bfc9859b6d28,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/1728876c-b26d-4822-a0f6-bfc9859b6d28/ref.png', 'test': './data/public_set/1728876c-b26d-4822-a0f6-bfc9859b6d28/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/1728876c-b26d-4822-a0f6-bfc9859b6d28/defect.png
8,90e42932-6f15-4888-b503-2cffbb73c6e0,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/90e42932-6f15-4888-b503-2cffbb73c6e0/ref.png', 'test': './data/public_set/90e42932-6f15-4888-b503-2cffbb73c6e0/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/90e42932-6f15-4888-b503-2cffbb73c6e0/defect.png
9,35dbdb53-58b0-4743-b3a0-9052752e3126,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/35dbdb53-58b0-4743-b3a0-9052752e3126/ref.png', 'test': './data/public_set/35dbdb53-58b0-4743-b3a0-9052752e3126/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/35dbdb53-58b0-4743-b3a0-9052752e3126/defect.png
10,2e3bece8-7fa2-4cd4-8443-79c5e147733e,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/2e3bece8-7fa2-4cd4-8443-79c5e147733e/ref.png', 'test': './data/public_set/2e3bece8-7fa2-4cd4-8443-79c5e147733e/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/2e3bece8-7fa2-4cd4-8443-79c5e147733e/defect.png
11,bd27cf15-c7fe-44b7-a7e7-9578f1a21088,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/bd27cf15-c7fe-44b7-a7e7-9578f1a21088/ref.png', 'test': './data/public_set/bd27cf15-c7fe-44b7-a7e7-9578f1a21088/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/bd27cf15-c7fe-44b7-a7e7-9578f1a21088/defect.png
12,5eb5f1f1-6e09-4f4f-a4f7-13f9a1d72737,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/5eb5f1f1-6e09-4f4f-a4f7-13f9a1d72737/ref.png', 'test': './data/public_set/5eb5f1f1-6e09-4f4f-a4f7-13f9a1d72737/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/5eb5f1f1-6e09-4f4f-a4f7-13f9a1d72737/defect.png
13,45ffd307-7ca6-4b20-ae21-5995ec17bb05,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/45ffd307-7ca6-4b20-ae21-5995ec17bb05/ref.png', 'test': './data/public_set/45ffd307-7ca6-4b20-ae21-5995ec17bb05/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/45ffd307-7ca6-4b20-ae21-5995ec17bb05/defect.png
14,41fd9355-1acf-4aed-b4aa-2e6c89bebf0b,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/41fd9355-1acf-4aed-b4aa-2e6c89bebf0b/ref.png', 'test': './data/public_set/41fd9355-1acf-4aed-b4aa-2e6c89bebf0b/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/41fd9355-1acf-4aed-b4aa-2e6c89bebf0b/defect.png
15,2b6977e5-2a8a-4f17-b4cf-780c91bbdd42,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/2b6977e5-2a8a-4f17-b4cf-780c91bbdd42/ref.png', 'test': './data/public_set/2b6977e5-2a8a-4f17-b4cf-780c91bbdd42/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/2b6977e5-2a8a-4f17-b4cf-780c91bbdd42/defect.png
16,565fafa2-dd38-4658-90a2-5693cefa1e8b,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/565fafa2-dd38-4658-90a2-5693cefa1e8b/ref.png', 'test': './data/public_set/565fafa2-dd38-4658-90a2-5693cefa1e8b/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/565fafa2-dd38-4658-90a2-5693cefa1e8b/defect.png
17,06bfdcf5-0478-4100-aa16-10b59cb6a5a4,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/06bfdcf5-0478-4100-aa16-10b59cb6a5a4/ref.png', 'test': './data/public_set/06bfdcf5-0478-4100-aa16-10b59cb6a5a4/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/06bfdcf5-0478-4100-aa16-10b59cb6a5a4/defect.png
18,5432cf8b-49d1-4cbc-a184-517cd3ffb404,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/5432cf8b-49d1-4cbc-a184-517cd3ffb404/ref.png', 'test': './data/public_set/5432cf8b-49d1-4cbc-a184-517cd3ffb404/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/5432cf8b-49d1-4cbc-a184-517cd3ffb404/defect.png
19,ec2941aa-3046-4ed7-b841-b521afc75f7c,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/ec2941aa-3046-4ed7-b841-b521afc75f7c/ref.png', 'test': './data/public_set/ec2941aa-3046-4ed7-b841-b521afc75f7c/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/ec2941aa-3046-4ed7-b841-b521afc75f7c/defect.png
20,419e14d9-c4bc-46cb-a789-599d59dc41e4,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/419e14d9-c4bc-46cb-a789-599d59dc41e4/ref.png', 'test': './data/public_set/419e14d9-c4bc-46cb-a789-599d59dc41e4/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/419e14d9-c4bc-46cb-a789-599d59dc41e4/defect.png
21,53f8105a-7464-479a-b145-0f5f6bef7b94,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/53f8105a-7464-479a-b145-0f5f6bef7b94/ref.png', 'test': './data/public_set/53f8105a-7464-479a-b145-0f5f6bef7b94/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/53f8105a-7464-479a-b145-0f5f6bef7b94/defect.png
22,45eb0371-b4ca-4ce1-8565-575f8b1465ee,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/45eb0371-b4ca-4ce1-8565-575f8b1465ee/ref.png', 'test': './data/public_set/45eb0371-b4ca-4ce1-8565-575f8b1465ee/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/45eb0371-b4ca-4ce1-8565-575f8b1465ee/defect.png
23,52531ecd-97af-48a3-aac1-7a3ca6331e0e,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/52531ecd-97af-48a3-aac1-7a3ca6331e0e/ref.png', 'test': './data/public_set/52531ecd-97af-48a3-aac1-7a3ca6331e0e/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/52531ecd-97af-48a3-aac1-7a3ca6331e0e/defect.png
24,b00e1b8f-2ff2-477d-bc4b-d66742acb932,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/b00e1b8f-2ff2-477d-bc4b-d66742acb932/ref.png', 'test': './data/public_set/b00e1b8f-2ff2-477d-bc4b-d66742acb932/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/b00e1b8f-2ff2-477d-bc4b-d66742acb932/defect.png
25,7cf3a2bd-10f3-4086-921e-1a0cd3cb2bf6,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/7cf3a2bd-10f3-4086-921e-1a0cd3cb2bf6/ref.png', 'test': './data/public_set/7cf3a2bd-10f3-4086-921e-1a0cd3cb2bf6/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/7cf3a2bd-10f3-4086-921e-1a0cd3cb2bf6/defect.png
26,423e5774-654b-4532-8b52-191ca23cfe35,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/423e5774-654b-4532-8b52-191ca23cfe35/ref.png', 'test': './data/public_set/423e5774-654b-4532-8b52-191ca23cfe35/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/423e5774-654b-4532-8b52-191ca23cfe35/defect.png
27,e73d04f0-6aa3-4da6-92dd-95cd23ce7c57,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/e73d04f0-6aa3-4da6-92dd-95cd23ce7c57/ref.png', 'test': './data/public_set/e73d04f0-6aa3-4da6-92dd-95cd23ce7c57/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/e73d04f0-6aa3-4da6-92dd-95cd23ce7c57/defect.png
28,c609674d-e692-4e81-8bbc-e38b31d15c3b,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/c609674d-e692-4e81-8bbc-e38b31d15c3b/ref.png', 'test': './data/public_set/c609674d-e692-4e81-8bbc-e38b31d15c3b/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/c609674d-e692-4e81-8bbc-e38b31d15c3b/defect.png
29,3a8300ad-00ce-4f79-9a83-0e0fc6c0802f,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/3a8300ad-00ce-4f79-9a83-0e0fc6c0802f/ref.png', 'test': './data/public_set/3a8300ad-00ce-4f79-9a83-0e0fc6c0802f/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/3a8300ad-00ce-4f79-9a83-0e0fc6c0802f/defect.png
30,2ec9501f-9292-4125-9f5c-015a9a6b0302,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/2ec9501f-9292-4125-9f5c-015a9a6b0302/ref.png', 'test': './data/public_set/2ec9501f-9292-4125-9f5c-015a9a6b0302/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/2ec9501f-9292-4125-9f5c-015a9a6b0302/defect.png
31,165bc2ff-474d-47f7-a7cc-31c76aac67be,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/165bc2ff-474d-47f7-a7cc-31c76aac67be/ref.png', 'test': './data/public_set/165bc2ff-474d-47f7-a7cc-31c76aac67be/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/165bc2ff-474d-47f7-a7cc-31c76aac67be/defect.png
32,f856ff65-774c-4c99-ac5e-b1fbae8248a5,contour_extraction,"Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Detect all the pattern using ref image and get the masks (pixel-level) of all the pattern. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between pattern contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","{'ref': './data/public_set/f856ff65-774c-4c99-ac5e-b1fbae8248a5/ref.png', 'test': './data/public_set/f856ff65-774c-4c99-ac5e-b1fbae8248a5/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/f856ff65-774c-4c99-ac5e-b1fbae8248a5/defect.png
33,8867a686-cc61-424b-8447-d8f45cde79e4,distance,Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/8867a686-cc61-424b-8447-d8f45cde79e4/ref.png'},float,MAE,347.9403684541361
34,76658856-2961-4672-bbd1-94837869aa7e,distance,Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/76658856-2961-4672-bbd1-94837869aa7e/ref.png'},float,MAE,338.7320804858229
35,b5d054a8-c462-4cd8-addd-610d1e71d1b3,distance,Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/b5d054a8-c462-4cd8-addd-610d1e71d1b3/ref.png'},float,MAE,411.56761750350745
36,f82883d8-84b7-4be0-89d3-efcafd5c2dba,distance,Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/f82883d8-84b7-4be0-89d3-efcafd5c2dba/ref.png'},float,MAE,286.80001743375124
37,0944a2e2-9456-4d10-bb3b-559a18846aa3,distance,Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/0944a2e2-9456-4d10-bb3b-559a18846aa3/ref.png'},float,MAE,428.981351576033
38,77d91df9-65fc-487f-8e5f-d539222e7ba3,distance,Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Calculate the distance between two pattern centroid. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/77d91df9-65fc-487f-8e5f-d539222e7ba3/ref.png'},float,MAE,408.71750635371615
39,9e081ece-ecc2-471e-b576-dffd49a14ec1,angle_from_origin,"Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)",{'ref': './data/public_set/9e081ece-ecc2-471e-b576-dffd49a14ec1/ref.png'},float,MAE,49.6858998395027
40,76d8cb00-e396-439a-93fe-ba461a951ee4,angle_from_origin,"Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)",{'ref': './data/public_set/76d8cb00-e396-439a-93fe-ba461a951ee4/ref.png'},float,MAE,55.2964428637349
41,4bde3094-10c3-4ff0-8348-aacb67a2f2f1,angle_from_origin,"Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)",{'ref': './data/public_set/4bde3094-10c3-4ff0-8348-aacb67a2f2f1/ref.png'},float,MAE,49.14345039262679
42,579c7c06-b4e4-4251-a1a6-34126f6a74f1,angle_from_origin,"Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)",{'ref': './data/public_set/579c7c06-b4e4-4251-a1a6-34126f6a74f1/ref.png'},float,MAE,28.8964162638126
43,3c6a09db-17b0-4725-8528-4702e41024df,angle_from_origin,"Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)","Calculate the angle of the pattern centroid (left top is origin, angle calculate from the top). (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.)",{'ref': './data/public_set/3c6a09db-17b0-4725-8528-4702e41024df/ref.png'},float,MAE,58.484951643138814
44,867d3144-ffcf-45a4-8085-5c10a7a5fe9c,density,Count the pattern on the images.  The picture area is 73 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Count the pattern on the images.  The picture area is 73 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/867d3144-ffcf-45a4-8085-5c10a7a5fe9c/ref.png'},float,MAE,1.1095890410958904
45,a5d645c7-c0e6-45da-86d3-c3a83a12b2e2,density,Count the pattern on the images.  The picture area is 51 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Count the pattern on the images.  The picture area is 51 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/a5d645c7-c0e6-45da-86d3-c3a83a12b2e2/ref.png'},float,MAE,1.2549019607843137
46,271bb188-df0f-4127-891b-249730034ff8,density,Count the pattern on the images.  The picture area is 69 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Count the pattern on the images.  The picture area is 69 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/271bb188-df0f-4127-891b-249730034ff8/ref.png'},float,MAE,2.0869565217391304
47,ca0ab1f6-704c-45c8-8c9c-8ceceb5d6feb,density,Count the pattern on the images.  The picture area is 41 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Count the pattern on the images.  The picture area is 41 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/ca0ab1f6-704c-45c8-8c9c-8ceceb5d6feb/ref.png'},float,MAE,4.121951219512195
48,2c11d998-30af-4a61-b378-d2085e54567c,density,Count the pattern on the images.  The picture area is 43 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Count the pattern on the images.  The picture area is 43 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/2c11d998-30af-4a61-b378-d2085e54567c/ref.png'},float,MAE,0.046511627906976744
49,dc7a9c85-7323-4112-ada9-347676ff2ffa,density,Count the pattern on the images.  The picture area is 80 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),Count the pattern on the images.  The picture area is 80 square meters. Calculate the density (count/per square meters) of the pattern. (Give the final answer in float or int using result variable. The graylevel of pattern is larger than background. Please use image processing method (such as otsu) to get the binary mask.),{'ref': './data/public_set/dc7a9c85-7323-4112-ada9-347676ff2ffa/ref.png'},float,MAE,0.2
50,ebaa7ca5-987a-4c86-82db-f849b6d8bf1c,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/ebaa7ca5-987a-4c86-82db-f849b6d8bf1c/ref.png', 'test': './data/public_set/ebaa7ca5-987a-4c86-82db-f849b6d8bf1c/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/ebaa7ca5-987a-4c86-82db-f849b6d8bf1c/defect.png
51,0c799e6d-d0fe-49dc-a9e6-6f0d68192ebb,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/0c799e6d-d0fe-49dc-a9e6-6f0d68192ebb/ref.png', 'test': './data/public_set/0c799e6d-d0fe-49dc-a9e6-6f0d68192ebb/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/0c799e6d-d0fe-49dc-a9e6-6f0d68192ebb/defect.png
52,5ab0c0f5-5e36-45e7-b5cc-8e62e2a3eb6a,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/5ab0c0f5-5e36-45e7-b5cc-8e62e2a3eb6a/ref.png', 'test': './data/public_set/5ab0c0f5-5e36-45e7-b5cc-8e62e2a3eb6a/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/5ab0c0f5-5e36-45e7-b5cc-8e62e2a3eb6a/defect.png
53,5f29dab0-6689-458b-a62e-3156c39968e0,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/5f29dab0-6689-458b-a62e-3156c39968e0/ref.png', 'test': './data/public_set/5f29dab0-6689-458b-a62e-3156c39968e0/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/5f29dab0-6689-458b-a62e-3156c39968e0/defect.png
54,4cde1332-d530-49d3-aa2f-23af38429840,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/4cde1332-d530-49d3-aa2f-23af38429840/ref.png', 'test': './data/public_set/4cde1332-d530-49d3-aa2f-23af38429840/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/4cde1332-d530-49d3-aa2f-23af38429840/defect.png
55,0553fc38-0adf-4032-81c0-8d43586360ff,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/0553fc38-0adf-4032-81c0-8d43586360ff/ref.png', 'test': './data/public_set/0553fc38-0adf-4032-81c0-8d43586360ff/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/0553fc38-0adf-4032-81c0-8d43586360ff/defect.png
56,609a5eac-ded6-4b98-8930-d22d70dc2c9c,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/609a5eac-ded6-4b98-8930-d22d70dc2c9c/ref.png', 'test': './data/public_set/609a5eac-ded6-4b98-8930-d22d70dc2c9c/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/609a5eac-ded6-4b98-8930-d22d70dc2c9c/defect.png
57,e8dfdc1f-344d-441a-899f-f4c3d83356b5,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/e8dfdc1f-344d-441a-899f-f4c3d83356b5/ref.png', 'test': './data/public_set/e8dfdc1f-344d-441a-899f-f4c3d83356b5/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/e8dfdc1f-344d-441a-899f-f4c3d83356b5/defect.png
58,593a524e-81b3-4cf8-98f3-1db6a6e8ccb9,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/593a524e-81b3-4cf8-98f3-1db6a6e8ccb9/ref.png', 'test': './data/public_set/593a524e-81b3-4cf8-98f3-1db6a6e8ccb9/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/593a524e-81b3-4cf8-98f3-1db6a6e8ccb9/defect.png
59,26244005-e111-4774-9349-2564fc1574c0,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/26244005-e111-4774-9349-2564fc1574c0/ref.png', 'test': './data/public_set/26244005-e111-4774-9349-2564fc1574c0/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/26244005-e111-4774-9349-2564fc1574c0/defect.png
60,a6172c6a-2dfe-431a-b162-f886ffa69af3,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/a6172c6a-2dfe-431a-b162-f886ffa69af3/ref.png', 'test': './data/public_set/a6172c6a-2dfe-431a-b162-f886ffa69af3/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/a6172c6a-2dfe-431a-b162-f886ffa69af3/defect.png
61,950ad48d-a849-47d4-9a26-d3afac5fce60,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/950ad48d-a849-47d4-9a26-d3afac5fce60/ref.png', 'test': './data/public_set/950ad48d-a849-47d4-9a26-d3afac5fce60/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/950ad48d-a849-47d4-9a26-d3afac5fce60/defect.png
62,02a2a8c3-0835-4e44-81cb-c93808cab3b4,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/02a2a8c3-0835-4e44-81cb-c93808cab3b4/ref.png', 'test': './data/public_set/02a2a8c3-0835-4e44-81cb-c93808cab3b4/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/02a2a8c3-0835-4e44-81cb-c93808cab3b4/defect.png
63,c5c3cde9-9c00-463a-908e-0b0e3b77fbc2,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/c5c3cde9-9c00-463a-908e-0b0e3b77fbc2/ref.png', 'test': './data/public_set/c5c3cde9-9c00-463a-908e-0b0e3b77fbc2/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/c5c3cde9-9c00-463a-908e-0b0e3b77fbc2/defect.png
64,623df4bd-c123-4df7-ad39-3d03162fd84c,alignment,Align reference with test images for range 20 pixels. Find the difference between two images. Supply the end result as a PIL.Image object,Covert reference and test image into gray (float). Align reference with test by minimizing the residual by rolling across dx dy for range 20 pixels. Calculate the residual of shifted reference and test. Set 30 pixel border of residual to 0 (Do not use pad). Display where the residual > 2.5*IQR. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/623df4bd-c123-4df7-ad39-3d03162fd84c/ref.png', 'test': './data/public_set/623df4bd-c123-4df7-ad39-3d03162fd84c/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/623df4bd-c123-4df7-ad39-3d03162fd84c/defect.png
65,22377cb2-fd3d-4255-bd9b-a0ed74e3204d,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/22377cb2-fd3d-4255-bd9b-a0ed74e3204d/ref.png', 'test': './data/public_set/22377cb2-fd3d-4255-bd9b-a0ed74e3204d/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/22377cb2-fd3d-4255-bd9b-a0ed74e3204d/defect.png
66,04f255ed-5824-4853-96e1-be41d14eaa4c,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/04f255ed-5824-4853-96e1-be41d14eaa4c/ref.png', 'test': './data/public_set/04f255ed-5824-4853-96e1-be41d14eaa4c/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/04f255ed-5824-4853-96e1-be41d14eaa4c/defect.png
67,2fda1697-33cb-47e5-a982-93795d3b862c,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/2fda1697-33cb-47e5-a982-93795d3b862c/ref.png', 'test': './data/public_set/2fda1697-33cb-47e5-a982-93795d3b862c/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/2fda1697-33cb-47e5-a982-93795d3b862c/defect.png
68,719a5c75-3d10-4ee8-ac66-32086c90e277,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/719a5c75-3d10-4ee8-ac66-32086c90e277/ref.png', 'test': './data/public_set/719a5c75-3d10-4ee8-ac66-32086c90e277/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/719a5c75-3d10-4ee8-ac66-32086c90e277/defect.png
69,970a3f6d-7115-46c5-8299-8aff43a205a7,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/970a3f6d-7115-46c5-8299-8aff43a205a7/ref.png', 'test': './data/public_set/970a3f6d-7115-46c5-8299-8aff43a205a7/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/970a3f6d-7115-46c5-8299-8aff43a205a7/defect.png
70,5a001254-f4d8-4ab0-b015-6090c03c3531,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/5a001254-f4d8-4ab0-b015-6090c03c3531/ref.png', 'test': './data/public_set/5a001254-f4d8-4ab0-b015-6090c03c3531/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/5a001254-f4d8-4ab0-b015-6090c03c3531/defect.png
71,265bb432-ab82-45b9-ba07-1ed172a10523,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/265bb432-ab82-45b9-ba07-1ed172a10523/ref.png', 'test': './data/public_set/265bb432-ab82-45b9-ba07-1ed172a10523/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/265bb432-ab82-45b9-ba07-1ed172a10523/defect.png
72,d7428c22-e5c7-4dea-b493-9aac26290c7c,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/d7428c22-e5c7-4dea-b493-9aac26290c7c/ref.png', 'test': './data/public_set/d7428c22-e5c7-4dea-b493-9aac26290c7c/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/d7428c22-e5c7-4dea-b493-9aac26290c7c/defect.png
73,69067ad2-ad4d-40c4-b621-7df6f38afc55,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/69067ad2-ad4d-40c4-b621-7df6f38afc55/ref.png', 'test': './data/public_set/69067ad2-ad4d-40c4-b621-7df6f38afc55/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/69067ad2-ad4d-40c4-b621-7df6f38afc55/defect.png
74,fd522ed1-93ee-4b3f-9b18-4e2bf3c332c8,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/fd522ed1-93ee-4b3f-9b18-4e2bf3c332c8/ref.png', 'test': './data/public_set/fd522ed1-93ee-4b3f-9b18-4e2bf3c332c8/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/fd522ed1-93ee-4b3f-9b18-4e2bf3c332c8/defect.png
75,2f073f39-b3ef-4014-a8fa-2a145570325f,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/2f073f39-b3ef-4014-a8fa-2a145570325f/ref.png', 'test': './data/public_set/2f073f39-b3ef-4014-a8fa-2a145570325f/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/2f073f39-b3ef-4014-a8fa-2a145570325f/defect.png
76,7fd25b73-9070-4b2e-8de2-ba3ddd467b7e,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/7fd25b73-9070-4b2e-8de2-ba3ddd467b7e/ref.png', 'test': './data/public_set/7fd25b73-9070-4b2e-8de2-ba3ddd467b7e/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/7fd25b73-9070-4b2e-8de2-ba3ddd467b7e/defect.png
77,89f32489-b669-46b6-b304-a1b54d0a409f,rotation,Adjust the orientation of the refence image using the test image. Display where the difference. Supply the end result as a PIL.Image object,Detect SIFT features in both the reference and test images. Match features using a Brute Force matcher. Estimate the rotation angle and translation using RANSAC. Rotate the reference image using the estimated homography matrix. Remove the noise of rotated referece image and test image. Calculate the residual using gray images and set 30 pixel border of residual to 0. Display where the outlier of residual in binary mask and remove small objects. Supply the end result as a PIL.Image object,"{'ref': './data/public_set/89f32489-b669-46b6-b304-a1b54d0a409f/ref.png', 'test': './data/public_set/89f32489-b669-46b6-b304-a1b54d0a409f/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/89f32489-b669-46b6-b304-a1b54d0a409f/defect.png
78,c1ada5be-4ab9-43c1-8742-8e1e384f7df1,contour_extraction,"Detect all the bear using ref image and get the masks (pixel-level) of all the bear. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bear contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bear using ref image and get the masks (pixel-level) of all the bear. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bear contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/c1ada5be-4ab9-43c1-8742-8e1e384f7df1/ref.png', 'test': './data/public_set/c1ada5be-4ab9-43c1-8742-8e1e384f7df1/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/c1ada5be-4ab9-43c1-8742-8e1e384f7df1/defect.png
79,6bc34f6b-3aa7-43ba-8427-027e1c394597,contour_extraction,"Detect all the bowl using ref image and get the masks (pixel-level) of all the bowl. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bowl contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bowl using ref image and get the masks (pixel-level) of all the bowl. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bowl contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/6bc34f6b-3aa7-43ba-8427-027e1c394597/ref.png', 'test': './data/public_set/6bc34f6b-3aa7-43ba-8427-027e1c394597/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/6bc34f6b-3aa7-43ba-8427-027e1c394597/defect.png
80,8cda5be1-f41a-49b6-afe8-f87687de4bf9,contour_extraction,"Detect all the bicycle using ref image and get the masks (pixel-level) of all the bicycle. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bicycle contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bicycle using ref image and get the masks (pixel-level) of all the bicycle. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bicycle contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/8cda5be1-f41a-49b6-afe8-f87687de4bf9/ref.png', 'test': './data/public_set/8cda5be1-f41a-49b6-afe8-f87687de4bf9/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/8cda5be1-f41a-49b6-afe8-f87687de4bf9/defect.png
81,6ac4a782-b549-4c99-8c03-590d89afc289,contour_extraction,"Detect all the bird using ref image and get the masks (pixel-level) of all the bird. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bird contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bird using ref image and get the masks (pixel-level) of all the bird. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bird contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/6ac4a782-b549-4c99-8c03-590d89afc289/ref.png', 'test': './data/public_set/6ac4a782-b549-4c99-8c03-590d89afc289/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/6ac4a782-b549-4c99-8c03-590d89afc289/defect.png
82,b2df9fce-6665-4f74-bce3-b453ccc795c6,contour_extraction,"Detect all the banana using ref image and get the masks (pixel-level) of all the banana. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between banana contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the banana using ref image and get the masks (pixel-level) of all the banana. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between banana contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/b2df9fce-6665-4f74-bce3-b453ccc795c6/ref.png', 'test': './data/public_set/b2df9fce-6665-4f74-bce3-b453ccc795c6/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/b2df9fce-6665-4f74-bce3-b453ccc795c6/defect.png
83,5a7b38f2-6b9d-43ff-874c-0183ddfc7fca,contour_extraction,"Detect all the bottle using ref image and get the masks (pixel-level) of all the bottle. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bottle contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bottle using ref image and get the masks (pixel-level) of all the bottle. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bottle contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/5a7b38f2-6b9d-43ff-874c-0183ddfc7fca/ref.png', 'test': './data/public_set/5a7b38f2-6b9d-43ff-874c-0183ddfc7fca/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/5a7b38f2-6b9d-43ff-874c-0183ddfc7fca/defect.png
84,67668735-0cd3-475c-91cf-d90f572af114,contour_extraction,"Detect all the airplane using ref image and get the masks (pixel-level) of all the airplane. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between airplane contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the airplane using ref image and get the masks (pixel-level) of all the airplane. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between airplane contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/67668735-0cd3-475c-91cf-d90f572af114/ref.png', 'test': './data/public_set/67668735-0cd3-475c-91cf-d90f572af114/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/67668735-0cd3-475c-91cf-d90f572af114/defect.png
85,e081b018-2a34-4681-bb71-55bbdeb59959,contour_extraction,"Detect all the bus using ref image and get the masks (pixel-level) of all the bus. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bus contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bus using ref image and get the masks (pixel-level) of all the bus. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bus contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/e081b018-2a34-4681-bb71-55bbdeb59959/ref.png', 'test': './data/public_set/e081b018-2a34-4681-bb71-55bbdeb59959/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/e081b018-2a34-4681-bb71-55bbdeb59959/defect.png
86,37fc13fa-0682-4e30-82eb-55b98ad8b83c,contour_extraction,"Detect all the bus using ref image and get the masks (pixel-level) of all the bus. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bus contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bus using ref image and get the masks (pixel-level) of all the bus. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bus contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/37fc13fa-0682-4e30-82eb-55b98ad8b83c/ref.png', 'test': './data/public_set/37fc13fa-0682-4e30-82eb-55b98ad8b83c/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/37fc13fa-0682-4e30-82eb-55b98ad8b83c/defect.png
87,928dfa3b-a5eb-49df-a24b-2dc4f4035bf9,contour_extraction,"Detect all the book using ref image and get the masks (pixel-level) of all the book. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between book contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the book using ref image and get the masks (pixel-level) of all the book. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between book contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/928dfa3b-a5eb-49df-a24b-2dc4f4035bf9/ref.png', 'test': './data/public_set/928dfa3b-a5eb-49df-a24b-2dc4f4035bf9/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/928dfa3b-a5eb-49df-a24b-2dc4f4035bf9/defect.png
88,77de5a80-90ca-4f91-ab2d-7780cae388d0,contour_extraction,"Detect all the boat using ref image and get the masks (pixel-level) of all the boat. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between boat contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the boat using ref image and get the masks (pixel-level) of all the boat. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between boat contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/77de5a80-90ca-4f91-ab2d-7780cae388d0/ref.png', 'test': './data/public_set/77de5a80-90ca-4f91-ab2d-7780cae388d0/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/77de5a80-90ca-4f91-ab2d-7780cae388d0/defect.png
89,e761d336-06ca-4802-8b97-0975603fcd35,contour_extraction,"Detect all the bottle using ref image and get the masks (pixel-level) of all the bottle. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bottle contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bottle using ref image and get the masks (pixel-level) of all the bottle. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bottle contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/e761d336-06ca-4802-8b97-0975603fcd35/ref.png', 'test': './data/public_set/e761d336-06ca-4802-8b97-0975603fcd35/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/e761d336-06ca-4802-8b97-0975603fcd35/defect.png
90,d498c21b-8bb4-4e57-89ca-d36568b01682,contour_extraction,"Detect all the bottle using ref image and get the masks (pixel-level) of all the bottle. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bottle contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bottle using ref image and get the masks (pixel-level) of all the bottle. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bottle contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/d498c21b-8bb4-4e57-89ca-d36568b01682/ref.png', 'test': './data/public_set/d498c21b-8bb4-4e57-89ca-d36568b01682/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/d498c21b-8bb4-4e57-89ca-d36568b01682/defect.png
91,58569269-fd07-4e01-8890-923fbc0e3ed0,contour_extraction,"Detect all the bench using ref image and get the masks (pixel-level) of all the bench. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Get the mask which represent the overlap between bench contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","Detect all the bench using ref image and get the masks (pixel-level) of all the bench. (If the objects is pattern, you can use image processing such as otsu to get the pattern. Otherwise, you can use object detection + segmentation model.)Convert two image into gray. Get the residual between two image (based on test image). Get the residual > 20. Get the mask which represent the overlap between bench contour and the residual outlier. (No overlap is possible)Supply the end result as a PIL.Image.uint8 (Do not use list). (If the mask is bool please multiply 255. Give the final answer in float or int using result variable.)","{'ref': './data/public_set/58569269-fd07-4e01-8890-923fbc0e3ed0/ref.png', 'test': './data/public_set/58569269-fd07-4e01-8890-923fbc0e3ed0/test.png'}","mask(graylevel, foreground: 255, background: 0)",IOU,./data/public_set/58569269-fd07-4e01-8890-923fbc0e3ed0/defect.png
92,65767e27-e163-4bba-b1ae-891c0871243f,density,Count the bicycle on the images.  The picture area is 44 square meters. Calculate the density (count/per square meters) of the bicycle. (Give the final answer in float or int using result variable.),Count the bicycle on the images.  The picture area is 44 square meters. Calculate the density (count/per square meters) of the bicycle. (Give the final answer in float or int using result variable.),{'ref': './data/public_set/65767e27-e163-4bba-b1ae-891c0871243f/ref.png'},float,MAE,0.022727272727272728
93,df8494e0-1838-4914-b126-84b9dd7e438b,density,Count the airplane on the images.  The picture area is 51 square meters. Calculate the density (count/per square meters) of the airplane. (Give the final answer in float or int using result variable.),Count the airplane on the images.  The picture area is 51 square meters. Calculate the density (count/per square meters) of the airplane. (Give the final answer in float or int using result variable.),{'ref': './data/public_set/df8494e0-1838-4914-b126-84b9dd7e438b/ref.png'},float,MAE,0.17647058823529413
94,bd7f3e5d-0bfd-4389-a916-1ec8e81a8811,density,Count the bird on the images.  The picture area is 79 square meters. Calculate the density (count/per square meters) of the bird. (Give the final answer in float or int using result variable.),Count the bird on the images.  The picture area is 79 square meters. Calculate the density (count/per square meters) of the bird. (Give the final answer in float or int using result variable.),{'ref': './data/public_set/bd7f3e5d-0bfd-4389-a916-1ec8e81a8811/ref.png'},float,MAE,0.012658227848101266
95,c26c58e1-dbd5-46da-b509-87804a4a1f59,density,Count the bottle on the images.  The picture area is 65 square meters. Calculate the density (count/per square meters) of the bottle. (Give the final answer in float or int using result variable.),Count the bottle on the images.  The picture area is 65 square meters. Calculate the density (count/per square meters) of the bottle. (Give the final answer in float or int using result variable.),{'ref': './data/public_set/c26c58e1-dbd5-46da-b509-87804a4a1f59/ref.png'},float,MAE,0.03076923076923077
96,9d8f5b08-a0a4-4a52-803e-755f63413439,density,Count the book on the images.  The picture area is 43 square meters. Calculate the density (count/per square meters) of the book. (Give the final answer in float or int using result variable.),Count the book on the images.  The picture area is 43 square meters. Calculate the density (count/per square meters) of the book. (Give the final answer in float or int using result variable.),{'ref': './data/public_set/9d8f5b08-a0a4-4a52-803e-755f63413439/ref.png'},float,MAE,0.09302325581395349
97,8d3bee61-301c-4a0c-b07c-8537e864d0ed,density,Count the boat on the images.  The picture area is 67 square meters. Calculate the density (count/per square meters) of the boat. (Give the final answer in float or int using result variable.),Count the boat on the images.  The picture area is 67 square meters. Calculate the density (count/per square meters) of the boat. (Give the final answer in float or int using result variable.),{'ref': './data/public_set/8d3bee61-301c-4a0c-b07c-8537e864d0ed/ref.png'},float,MAE,0.07462686567164178
98,1332fabb-7eb6-456c-8d54-78126fda7266,density,Count the bottle on the images.  The picture area is 38 square meters. Calculate the density (count/per square meters) of the bottle. (Give the final answer in float or int using result variable.),Count the bottle on the images.  The picture area is 38 square meters. Calculate the density (count/per square meters) of the bottle. (Give the final answer in float or int using result variable.),{'ref': './data/public_set/1332fabb-7eb6-456c-8d54-78126fda7266/ref.png'},float,MAE,0.02631578947368421
99,4ec8f104-5215-426d-831f-1f18aebdfbab,density,Count the bench on the images.  The picture area is 70 square meters. Calculate the density (count/per square meters) of the bench. (Give the final answer in float or int using result variable.),Count the bench on the images.  The picture area is 70 square meters. Calculate the density (count/per square meters) of the bench. (Give the final answer in float or int using result variable.),{'ref': './data/public_set/4ec8f104-5215-426d-831f-1f18aebdfbab/ref.png'},float,MAE,0.02857142857142857
